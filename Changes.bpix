--------------------------------------------------------------------------------

Doug Burke (08/30/00)
   - using NaN/Inf seems to work. Now need to work out how to get routines
     flagged by 'NoBadifNaN=>1' to ignore the BadCode section for floating-
     point types.
   - fixed str2D
   - removed pdlcore.c, added pdlcore.c.PL: fiddled SvPDLV to set the datatype
     to PDL_D if a NaN is supplied. Sensible? It means we cah leave 
     whichdatatype_double alone.
Doug Burke (08/30/00)
   - hopefully fixed yesterday's problem with CHILD types. Core stuff has been
     changed.
   - have HACKED list() to return BAD. A bit nasty. Still need to change
     str2D in Core to take account of it.
   - may have to change assgn to handle bad values ? 
     Something is screwed up... I may have to change whichdatatype_XXX
     to process NaN values
Doug Burke (08/29/00)
   - started to convert to use Nan/Inf for non-integer types. Have got
     $xxxBAD/GOODxxx macros converted in Gen/PP/PDLCode.pm. 
     Need to allow to switch off (testing and non-NaN machines).
     Need to clean up Core stuff so change set-up values for F and D from
     STARLINK.
     Need to change bad code so can't change floating point bad values
     (add a function: can_change_badvalue(type) returning 0 or 1)
     Do we need to ensure that the xs code has a '#include <math.h>'
     and that the Makefile links with -lm ? (it seems to compile okay on linux 
     without this bother)
Doug Burke (08/28/00)
   - commented out exception handling in ops.pd as want to get NaN/Inf stuff
     (ie using them for bad values in F,D data types) first
   - improving bad-value support in IO::NDF - added NDF.xs.PL. The aim is to
     convert to piddle bad values when read in. Not looked at writing out.
Doug Burke (08/16/00-08/25/00)
   - added initial attempt to trap illegal ops in Ops. Needs thinking about for
     unsigned integer types, since checks like 'a < 0' are always false
     - perhaps use 'type() %{ %}'...?
     NOTE: needs to be incorporated into Code section, which means *a lot*
           of thinking about
   - trying to get rfits/wfits to propogate badflag info. somewhat broken
   - corrected isfinite() documentation to live up to its name
   - added 'bad2' to the demos: eye-candy for the soul! This involves
     installing m51.fits into the Demos dir of the installed distribution
   - $pdl->badvalue(23) finally changes the bad values in $pdl to the new
     value (here 23).
   - added $pdl->setbadat(2) -- a wrapper around set() -- probably mostly
     useful for test scripts
Doug Burke (08/10/00-08/13/00)
   - added some text to PDL::PP documentation about writing 'bad' code
   - clean up of documentation and output from 'badinfo' command: added
     PDL::BadValues document (amalgam of README.bpix, IMPLEMENTATION.bpix, and
     TODO.bpix)
   - math.pd: added isfinite(), converted badmask to handle bad values
   - histogram/whistogram/histogram2d (primitive.pd) converted
   - cleaned up so works with no bad value support (ie WITH_BADVAL=0)
   - added patchbad2d to Image2D
Doug Burke (08/02/00-08/03/00)
   - added more to the demo
   - brought up to date with changes on main branch (see Changes)
   - fixed an inplace/propogation of bad flag in PDL::Bad (except for setbadif,
     which is broken when used inplace) and in PDL::Ops (involved moving
     propogate_badflag from bad.pd to Core.xs.PL)
Doug Burke (07/27/00)
   - changed PP/PDLCode.pm to greatly improve the handling of 'bad' code. It's
     almost not a horrible hack now ;)
   - added 'demo bad' to perldl - it doesn't do much at the moment
Doug Burke (07/26/00)
   - removed UseBadforNaN from primitive.pd, bad.pd, added NoBadifNaN to 
     ops.pd and math.pd
   - hacked PDL::IO::NDF to read/write the bad value flag (incomplete) 
     Some problems with byte datatype?
   - replacebad can now be used inplace, added copybad to PDL::Bad (also 
     inplace)
Doug Burke (07/21/00)
   - now works if use 'threadloop %{ .. %}' in Code/BadCode (PP/PDLCode.pm 
     should really be rewritten as my hacks are horrible)
   - began to convert image2d.pd
   - brought up to date with recent changes to the main branch (see Changes)
Doug Burke (07/16/00)
   - added setbadif() to PDL::Bad + minor doc updates
   - added SETPDLSTATE(BAD|GOOD) and ISPDLSTATE(BAD|GOOD) expansions to dosubst 
     in PP.pm (useful for xxxxBadStatusCode)
   - removed badvalue_as_pdl()
Doug Burke (07/15/00)
   - fixed qsorti() and perldl's badinfo command
   - added $ISBADVAR(foo,pdl) & other macros, improved/cleaned up 
     EquivCPOffsCode support - see IMPLEMENTATION.bpix
   - restored t/picnorgb.t to old (ie main branch) version; now works on linux
   - converted comparison & bit ops in ops.pd, so $a = ($b > 0.2) propogates
     bad values
   - started labelling routines with 'UseBadforNaN => 1' in preparation for
     someone implementing NaN support, for more routines conv in primitive.pd
Doug Burke (07/14/00)
   - converted math.pd - badmask needs thinking about, all the rest are either
     converted (and need testing), or flagged as not supporting bad values
     (eg svd)
Doug Burke (07/13/00)
   - added $PDL::Bad::Status variable to PDL::Bad - 1 for support, 0 for
     no support (boo, hiss)
   - added discussion to README.bpix about setting/propogation of badflag
     and to TODO.bpix about need for something like '$a = setbadif($a < 20)'
   - renamed baddata() to badflag(), added check_badstatus() routine to bad.pd
   - added badvalue_as_pdl() [returns a bad value in a 0D piddle with the
     bad flag set]. After writing it I realised I really wanted something
     like '$a += badwhere($a < 20)' instead - see TODO.bpix
   - changed zcover's documentation from '!=' to '==', since it's a check
     for zeroes (or that's how the code works and zcheck is documentated)
   - it *looks* like I've fixed zcover (somehow; partly due to changing my
     definition of success!)
Doug Burke (07/12/00)
   - wahay, stats() now works. Whilst not a major achievement, it was why I 
     started this whole thing...
   - added $PDLSTATE... macros to access the bad value flag of a piddle 
     within pp_def(). Corresponding $STATE... macros as well, but not sure
     they'll be needed.
   - the $ISBAD/$ISGOOD/$SETBAD macros no longer need the $ before the pdl
     name (to reduce the amount of line noise), so
       $ISBAD($a(n))  and $ISBAD(a(n))  are the same
   - first attempt at including information on bad-value support into the
     documentation. '=for bad' has been introduced, with a 'badinfo' command
     in perldl/-b flag in pdldoc. For pp_def functions you can supply 
     information using the 'BadDoc' option or let it generate some simple
     text itself. Comments please. Note, it doesn't work properly!
   - converted median code in primitive.pd. 
Doug Burke (07/11/00)
   - fixed test 7. Added a quick overview section to README.bpix. 
   - added $PPISBAD, $PPISGOOD, and $PPSETBAD macros - see IMPLEMENTATION.bpix
   - changed internal access to bad value data (see badvalue subs in bad.pd)
     to ensure that '$a = byte->badvalue * ones(byte,3,4)' returns a piddle
     of type byte.
   - Wahay - thanks to Christian, I've managed to get baddata() to propogate
     itself along to any children of a piddle. Now, what to do with the 
     parents of a piddle (see IMPLEMENTATION.bpix)?
Doug Burke (07/11/00)
   - tried using flags field in trans structure rather than adding a
     new element (ie bvalflag). didn't really work - see 
     IMPLEMENTATION.bpix for more comments.
   - The bad value support seems to work now on linux (probably failed due to
     an incorrect build).
   - I seem to have broken test 7 in t/bad.t. Added tests of Primitive's zcover
     since they fail.
   - flagged Primitive's intover as a 'HandleBad => 0' case - not tested.
   - added some musings on Tim Jenness' suggestion to use NaN (IEEE)
     support if available (see IMPLEMENTATION.bpix)
Doug Burke (07/10/00)
   - Three macros have been added to make writing pp code a LOT easier:
       $ISBAD, $ISGOOD, and $SETBAD. See IMPLEMENTATION.bpix
     Thanks to Tuomas for the suggestion.
   - bad values are now stored in a C structure, rather than a perl array
     This seems okay on Solaris but not Linux ...
   - isbad() and isgood() implemented as pp code rather than
     perl wrappers around '==' and '!='
Doug Burke (07/09/00)
   - initial CVS upload.
   - plenty to do, see the *.bpix files for some rudimentary info
