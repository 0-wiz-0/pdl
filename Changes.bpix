--------------------------------------------------------------------------------

Doug Burke (07/13/00)
   - added $PDL::Bad::Status variable to PDL::Bad - 1 for support, 0 for
     no support (boo, hiss)
   - added discussion to README.bpix about setting/propogation of badflag
     and to TODO.bpix about need for something like '$a = setbadif($a < 20)'
   - renamed baddata() to badflag(), added check_badstatus() routine to bad.pd
   - added badvalue_as_pdl() [returns a bad value in a 0D piddle with the
     bad flag set]. After writing it I realised I really wanted something
     like '$a += badwhere($a < 20)' instead - see TODO.bpix
   - changed zcover's documentation from '!=' to '==', since it's a check
     for zeroes (or that's how the code works and zcheck is documentated)
   - it *looks* like I've fixed zcover (somehow; partly due to changing my
     definition of success!)
Doug Burke (07/12/00)
   - wahay, stats() now works. Whilst not a major achievement, it was why I 
     started this whole thing...
   - added $PDLSTATE... macros to access the bad value flag of a piddle 
     within pp_def(). Corresponding $STATE... macros as well, but not sure
     they'll be needed.
   - the $ISBAD/$ISGOOD/$SETBAD macros no longer need the $ before the pdl
     name (to reduce the amount of line noise), so
       $ISBAD($a(n))  and $ISBAD(a(n))  are the same
   - first attempt at including information on bad-value support into the
     documentation. '=for bad' has been introduced, with a 'badinfo' command
     in perldl/-b flag in pdldoc. For pp_def functions you can supply 
     information using the 'BadDoc' option or let it generate some simple
     text itself. Comments please. Note, it doesn't work properly!
   - converted median code in primitive.pd. 
Doug Burke (07/11/00)
   - fixed test 7. Added a quick overview section to README.bpix. 
   - added $PPISBAD, $PPISGOOD, and $PPSETBAD macros - see IMPLEMENTATION.bpix
   - changed internal access to bad value data (see badvalue subs in bad.pd)
     to ensure that '$a = byte->badvalue * ones(byte,3,4)' returns a piddle
     of type byte.
   - Wahay - thanks to Christian, I've managed to get baddata() to propogate
     itself along to any children of a piddle. Now, what to do with the 
     parents of a piddle (see IMPLEMENTATION.bpix)?
Doug Burke (07/11/00)
   - tried using flags field in trans structure rather than adding a
     new element (ie bvalflag). didn't really work - see 
     IMPLEMENTATION.bpix for more comments.
   - The bad value support seems to work now on linux (probably failed due to
     an incorrect build).
   - I seem to have broken test 7 in t/bad.t. Added tests of Primitive's zcover
     since they fail.
   - flagged Primitive's intover as a 'HandleBad => 0' case - not tested.
   - added some musings on Tim Jenness' suggestion to use NaN (IEEE)
     support if available (see IMPLEMENTATION.bpix)
Doug Burke (07/10/00)
   - Three macros have been added to make writing pp code a LOT easier:
       $ISBAD, $ISGOOD, and $SETBAD. See IMPLEMENTATION.bpix
     Thanks to Tuomas for the suggestion.
   - bad values are now stored in a C structure, rather than a perl array
     This seems okay on Solaris but not Linux ...
   - isbad() and isgood() implemented as pp code rather than
     perl wrappers around '==' and '!='
Doug Burke (07/09/00)
   - initial CVS upload.
   - plenty to do, see the *.bpix files for some rudimentary info
