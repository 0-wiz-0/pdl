pp_addpm({At=>Top},<<'EOD');

=head1 NAME

PDL::Ops - Fundamental mathematical operators

=head1 DESCRIPTION

This module provides the functions used by PDL to
overload the basic mathematical operators (C<+ - / *>
etc.) and functions (C<sin sqrt> etc.)

=head1 SYNOPSIS

none

=cut

EOD
pp_addhdr('
#include <math.h>

#define MOD(X,N)     ( (X) - (N)*((int)((X)/(N))) )
#define SPACE(A,B)   ( ((A)<(B)) ? -1 : ((A)!=(B)) )
#define ABS(A)       ( (A)>=0 ? (A) : -(A) )
#define NOTHING
');

# simple binary operators
sub biop {
	my ($name,$op,$swap,%extra) = @_;
	if ($swap) {
	  $extra{HdrCode} = << 'EOH';
  pdl *tmp;
  if (swap) {
    tmp = a;
    a = b;
    b = tmp;
  }
EOH
        }
	pp_def($name,
		Pars => 'a(); b(); [o]c();',
		OtherPars => 'int swap',
		Code => "\$c() = \$a() $op \$b();",
		%extra);
}

#simple binary functions
sub bifunc {
	my ($name,$func,$swap,%extra) = @_;
	if ($swap) {
	  $extra{HdrCode} = << 'EOH';
  pdl *tmp;
  if (swap) {
    tmp = a;
    a = b;
    b = tmp;
  }
EOH
        }
	pp_def($name,
		Pars => 'a(); b(); [o]c();',
		OtherPars => 'int swap',
		Code => "\$c() = $func(\$a(),\$b());",
		%extra);
}

# simple unary functions and operators
sub ufunc {
	my ($name,$func,%extra) = @_;
	pp_def($name,
		Pars => 'a(); [o]b()',
		Code => "\$b() = $func(\$a());",
		%extra);
}


## arithmetic ops
# no swap
biop('plus','+',0);
biop('mult','*',0);

# all those need swapping
biop('minus','-',1);
biop('divide','/',1);

## comparison ops
# need swapping
biop('gt','>',1);
biop('lt','<',1);
biop('le','<=',1);
biop('ge','>=',1);
# no swap required
biop('eq','==',0);
biop('ne','!=',0);

## bit ops
# those need to be limited to the right types
my $T = [B,U,S,L]; # the sensible types here
biop('shiftleft','<<',1,GenericTypes => $T);
biop('shiftright','>>',1,GenericTypes => $T);
biop('orop','|',0,GenericTypes => $T);
biop('andop','&',0,GenericTypes => $T);
biop('xor','^',0,GenericTypes => $T);

# really an ufunc
ufunc('bitnot','~',GenericTypes => $T);

# some standard binary functions
bifunc('power','pow',1,GenericTypes => [D]);
bifunc('atan2','atan2',1,GenericTypes => [D]);
bifunc('modulo','MOD',1);
bifunc('spaceship','SPACE',1);

# some standard unary functions
ufunc('sqrt','sqrt');
ufunc('abs','ABS',GenericTypes => [D,F,S,L]);
ufunc('sin','sin');
ufunc('cos','cos');
ufunc('not','!');
ufunc('log','log',GenericTypes => [D]);
ufunc('exp','exp',GenericTypes => [D]);

pp_addpm({At=>Bot},<<'EOPM');

=head1 AUTHOR

Doug Hunt (dhunt@ucar.edu), Tuomas J. Lukka (lukka@fas.harvard.edu),
Karl Glazebrook (kgb@aaoepp.aao.gov.au) and Christian Soeller
(c.soeller@auckland.ac.nz).

=cut

EOPM

pp_export_nothing(); 
pp_done();

